version: '3.9'
services:
    # Services for api products
    postgres-api-products-dev:
      container_name: postgres-api-dbs
      ports:
        - '5433:5432'
      env_file:
        - database.env # configure postgres
      volumes:
        - 'postgres-eviden:/var/lib/postgresql/data'
      image: 'postgres'
      networks:
        - default
    zookeeper:
      image: confluentinc/cp-zookeeper:7.6.0
      hostname: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - 22181:2181
      networks:
        - default
    kafka:
      image: confluentinc/cp-kafka:7.6.0
      hostname: broker
      depends_on:
        - zookeeper
      ports:
        - 29092:29092
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      networks:
        - default
    schema-registry:
      image: confluentinc/cp-schema-registry:7.6.0
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - kafka
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9092'
    kafka-ui:
      container_name: kafka-ui
      image: provectuslabs/kafka-ui:latest
      ports:
        - 8080:8080
      depends_on:
        - kafka
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
        KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
        DYNAMIC_CONFIG_ENABLED: 'true'
volumes:
    postgres-eviden:
networks:
    default:
      driver: bridge
    swarm-network:
      name: dockers_swarm_network
